RPC which stands for remote procedure

call is a way for your code to call an

external service using a function call

instead of an HTTP request the benefit

of this technology is that it simplifies

your code because it looks like you're

making regular function calls even

though you're accessing an external

service this is why RPC is commonly used

in a microservice architecture grpc

which was created by Google is the most

popular RPC framework one major benefit

of grpc is that microservices could talk

to each other even if they're

implemented in different languages this

is because RPC functions and arguments

are defined using an interface

definition language called protobuf that

protuff is then used to generate

function stubs in many different

languages rust has great support for

grpc in today's video we're going to

learn how to use grpc in Rust by

implementing a grpc server and client

but before we get to that if you haven't

already make sure to get your free rust

chii by heading over to Let's scar

ry.com CHI with that said let's get

[Music]

rusty in this video we're going to

simulate a payment service in Rust the

first thing we want to do is Define our

protocol buffers so to do that let's

create a new folder in the root

directory called

Proto then we'll add a file called

payments.

prototo then we'll specify the syntax

version we're using and Define a package

name the package name will be used by

the grpc library we add later on next

let's define a

service our service is going to be

called Bitcoin which is a payment method

and it's going to have one function

called send payment which takes a BTC

payment request and returns a BTC

payment response let's define both those

messages a payment request is going to

have a from address to address and

payment amount and a payment response is

going to have a flag indicating if the

transaction was successful and a message

now that our protocol buffers are

defined let's flip over to cargo. Tomo

and add some

dependencies the first two dependencies

will'll add is tonic and PR PR is a

protocol buffer implementation for rust

and tonic is a grpc implementation for

rust we'll also take a dependency on

Tokyo which is the most popular async

runtime for

rust for Tokyo will enable the macros

and multi-threaded runtime features

we'll also take a build dependency on

tonic build which will allow cargo to

build our protocol buffers during

compilation to use this dependency we'll

also need to add a build. RS file in the

root of our

directory this file acts as a build

script for cargo and it will configure

tonic build

here we're telling tonic Bill to compile

our protocol buffers which are located

in the Proto directory with the setup

out of the way let's create our grpc

server and Client First we'll rename

main. RS to server.

RS we'll also create a new file in the

source directory called client.

RS and we'll give client. RS an empty

main function

then we'll navigate back to cargo.

tomomo and Mark both these files as

binary

crates server. RS is going to be

compiled to a library called payments DS

server and client. rs is going to be

compiled to a binary called payments

dcent then we'll implement the grpc

server first we'll import the various

types tonic generated for US based on

our protocol buffer

definitions on line 6 through 8 we

declare a new module called payments

which is going to use the include Proto

macro to include the types tonic

generated for US based on our payments.

Proto file on line three and four we

bring those types into scope also on

line one we bring some types defined in

the tonic Library into scope underneath

the payments module let's create a new

struct called Bitcoin

service then we'll implement the Bitcoin

trait which we defined up here for

Bitcoin

service the Bitcoin trade requires that

we Implement all the methods we've

defined on the Bitcoin service which in

this case is only one method called send

payment also note that we add this tonic

async trait attribute because the send

payment method is going to be async

the send payment method is going to take

a request which is going to be a grpc

request containing BTC payment request

metadata and return a result which is

either going to be a grpc response

containing BTC payment response metadata

or a grpc status in the error case

inside the method body we're going to

print the request get the request

metadata create a reply and then send

out the reply because this is just an

example we're always going to say

successful to true the last thing we

need to do is update

main let's update main to use the Tokyo

async

runtime then we'll create a new instance

of Bitcoin

service and finally we'll instantiate a

new grpc server which uses Bitcoin

service with that our grpc server is now

complete next let's Implement our grpc

client just like before first we'll

import the protuff types tonic defined

for

us in this case we only need Bitcoin

client and and BTC payment request and

again like before we'll update main to

use the Tokyo

runtime inside main let's instantiate a

new instance of Bitcoin

client then we'll create a new BTC

payment request

finally we'll send the request and print

the

response with that our grpc client is

now complete let's go ahead and test our

code by running the grpc server and

client at the same time

first we'll run the server by typing in

cargo run-- bin payments Das

server then we'll run the client in a

separate terminal by typing in cargo

run-- bin payments

client as we can see our grpc server got

the request and returned a response

that's it for this video but before you

leave make sure to get your free rust

chii by heading over to Let's getet

ry.com Chi also if you enjoyed the

content make sure to give the video a

like And subscribe to the Channel with

that said I'll see you in the next one

[Music]

