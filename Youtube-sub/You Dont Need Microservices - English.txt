What's going on guys? AssalaMualeikum. Welcome to Amigoscode. In this video, I want to discuss with you why you should never start with microservices when building applications. This is something that I've seen a lot of people doing—they are applying for jobs, or they are complete beginners and want to learn pretty much everything because the job spec says that you need to know about microservices, you need to know about AWS, you need to know about X, you need to know about Y. You need to know about basically the whole world, and you just kind of freak out, and then you go and basically try and learn everything.

Now, this is literally wrong. In fact, recently, I think it was last week, Amazon Prime wrote an article about how they switched from serverless microservices architecture to a monolithic architecture, which is mind-blowing. They saved, I think, over 90% of their AWS bill, which is crazy.

So, what are microservices? Let's first understand microservices. Microservices are the idea where you have little fine-grained services that do one and only one thing and do it well. Then you basically have microservices. For example, microservice A sends emails—that's its only job. Then you've got microservice B that performs customer registration, and microservice C that performs authentication. They communicate with each other via HTTP. The benefit is that they are very small. Each team owns the microservice. You can choose whatever language you want and whether you want to adopt serverless or not. The possibilities are huge, and in most cases, you are able to scale. If you look at this diagram, this is an example of microservices. This is part of my microservices course, which you can find on the website. You can see that I've got a couple of microservices. When they want to talk to each other, there's a message queue. Each of these microservices has its own database. They also pull Docker images from the Registry config server for configuration and tracing. This is quite intense.

If you are building an application from scratch, do you think it makes sense for you to use microservices? Come on, yes or no? Absolutely no. There's no need for you to build your application using microservices if you're starting from the ground because the complexity involved is huge for something very small. You don't know whether the application will scale or make its way to the market, for example. You don't know how many users will consume the application. With all these unknowns, why put so much effort into learning microservices just for the sake of learning them?

The reason I was able to learn microservices is that I came from a monolithic background, and back then I saw all the issues. My team started to encounter issues where deployments took a long time. If I wanted to release a feature, I would need to take down the whole system, which wasn't great. It took a long time to release, and in terms of scaling, it was a bottleneck for us. That's when we decided to switch to microservices. We started with a monolithic architecture and gradually encountered issues. Then we asked, "What is the best way for us to solve these issues?" Microservices were the solution for us. At that point, we had to think, "Okay, team A will own microservice A, B, and C, for example, and team B will own microservice D, X, Y, Z." That was the turning point for us to switch to microservices.

For you, I would say there's no benefit in learning microservices from the beginning. Start with a monolithic architecture. Go from this to this. You can see that this diagram is much simpler than the other one. If you're deploying this to production, you've got a load balancer and replicas of your application. You can have multiple business functions within the application, provided that it is very small, and they all talk to one database instead of managing multiple databases. This is nice and simple for you to learn. As things scale, you will start to encounter issues. If releases take too long, you need to solve that issue. If you're not scaling well, you need to solve that issue. If you need to introduce a message queue, introduce a message queue. Don't think that microservices are always the solution because they are not.

There's a misconception that monolithic architecture is old technology. What's old about it? There's nothing old about it. You can use whatever language or framework you want. Use whatever works best for you. Serve your customers with a system that works without complexity that you can't even manage. I would rather have a system that works really well and is easy to manage. Developers don't like things that are complicated. We always opt for the simplest solution, provided it makes sense. This architecture is the best approach for you as a beginner. You will learn a lot from it, and your understanding will be much better if you start with monolithic and then transition to microservices.

Our course on the website, the Full Stack Professional, is around 70 hours. Currently, we have a one-year JetBrains product pack license worth $700. Check it out. The course is more than 50 hours now. It covers building a full-stack application from the ground up. Towards the end, I'll introduce everything you need to know to start thinking about using microservices. This video aims to address the misconception that you need to learn microservices and forget about monolithic. Amazon Prime moved from microservices to monolithic. Let me know in the comments—are you using monolithic or microservices? Should you start with microservices, yes or no?

That's pretty much it. Don't forget to subscribe, smash the like button, and I'll see you in the next one. Salem Malikum.