Now, one thing I've really struggled with in the past is being able to confidently say no without then feeling the need to add some sort of clarification. Travis, can you have this feature done by tomorrow at lunchtime? Knowing that's a big ask, I would answer with something like, "Well, that's a tall order, but I'll see what I can do." Well, here's the secret: project managers take that answer as a yes, when in reality you meant no. You didn't convey no like you should have. This ability to say no needs to be a learned skill for most of us. In fact, one defining mark as a leader is being able to say no. "No, I can't have it done by next Tuesday." "No, I have plans next week. Let's plan it at a later date." 

The easy route is just to say yes. We can all do that. As developers, we want to outperform, we want to be hard workers, we want to look like we're competent, and saying no or "No, I won't have it done by then" becomes some sort of failure for us, so we think. But in actuality, learning to say no will propel you forward in your career and really in life more than you think. First, it actually gives you opportunity. There's a saying that says, "Saying no to something means a yes to something else." You just have to know your priorities. Tim Ferris once said, "What you don't do determines what you can do." Second, it makes you a more trustable person. You mean what you say. People can expect the truth out of you, and in having that confidence to say no, it implicitly means that when you say yes, it is with the same confidence. In fact, I've heard it said that the BBC used to vet new hires in an assessment around how they would react to a colleague who kept asking for help on similar things but refused to learn how to do it themselves. 

Employers would rather have a person that knows how to say no than a person that always says yes and never delivers or a person that's just always trying to please others. One manager said it this way: As a manager of managers, I keep reminding my team that if I'm delegating more than they can deal with, then to let me know. Personally, I admire someone that speaks up and says they're at capacity. It shows self-awareness as well as the ability to ask for help. All in all, asking for help is a good thing. Managers really want to know when you can't handle more. If you're always accepting new tasks and saying yes to things that you can't back up, they'll just keep assigning, and either you'll get burnt out or you'll just fail to deliver on the things that you've committed to. 

So, I'm going to share a diagram with you here in a minute to not only help you know when to say no, but how to make decisions overall. But before that, I wanted to look at a few statements in an article I happened to be reading the other day that had a few helpful points in it. So, this guy, at the time of writing this, is a young developer with barely three years of experience. As a young developer with barely three years of experience, I find myself dealing with new aspects of relationships with peers in my job almost every day, especially when it comes to speaking to senior developers about how that feature you're developing is going. And he says, and you know, when you're new in the office, you often want to act like the guy who isn't causing troubles to the seniors, whose job is always done in time and who isn't causing any troubles because he still doesn't know how the project works. 

So, sometimes you basically lie and act like everything you're working on is under control, like you don't know that this feature will be late and you will somehow find a way to make this work for the promised deadline. If you believe this behavior is going to make you shine or simply save your face, then you're wrong. That's what happens to many of us when we're new developers and we're working with senior devs. We don't want to look like imposters. We want to look competent, as if we can be the same level of competence as the seniors themselves. And so we exaggerate, and we act like everything is under control. "We got this. I'll have this done tomorrow. No problem." See, not only is this practice dishonest, but dishonest is also one of the basic behaviors of somebody who's not what we would call a professional. I would also substitute that word "professional" with "leader." Someone who isn't exhibiting leadership, which we should all be striving to develop. 

You either lead, or you follow. A professional or leader won't lie to you about a deadline. It won't accuse somebody else if the code he or she has written doesn't work. If you commit to having something done in a time frame that isn't reasonable, isn't it worse to lie about that deadline than to perhaps look incompetent or slow? Now, you might be thinking, "Well, sometimes I just can't say no," or, "If I keep saying no, I might lose my job." But here's the thing: More than you winning every "no" argument that you give, which you will not, you instead set the precedent that you aren't a pushover, that you should be respected, and that you don't accept tasks that are impossible. And this then will make your "yes" more valuable. More than a word itself, it's a way of thinking, an instant boost in confidence in how you do business with people, including your own boss. 

Remember, as I stated in this video link above, that you should think of your career as a business and start thinking of your employer as a customer for your business of developing software. Management is quick to recognize who they can put impossible tasks on and who they can't. Say yes to everything, and you'll receive everything. You'll become a pushover. But part of your job as a developer is to recognize the time that it takes to do technical work, and then push back based on your experience, which you have more of than they do. Here's some good advice: I saw this on Reddit. Instead of saying "no," spelled wrong, but instead of saying "no," "o," I explained the complexities of what would happen by saying yes. So the guy's not saying no, but he explains, "Hey, this is what's going to happen if I say yes. If I say yes, other projects will be pushed out of the way. 

If I say yes, the cost-time of me doing something would be high due to my inexperience in doing that task. So I can say yes, but here are the complexities of me taking on this task right now." Things may work differently for others, but turning a no to a yes on my terms is what has worked well in any situation I've been in. I think that's good advice. So let me give you a diagram that I found very helpful, not specific only to developers, but to humans in all walks of life, from business owners to developers to parents even, and it's called the Eisenhower Matrix. And yes, it came from Dwight D. Eisenhower, the 34th President of the United States, who said in a 1954 speech, "I have two kinds of problems: the urgent and the important. 

The urgent are not important, and the important are never urgent." And then Stephen Covey, who wrote "The 7 Habits of Highly Effective People," took these words and created this matrix. And basically, you have four categories. If it's urgent and important, do it. If it's not urgent but it is important, schedule it. If it's urgent but not really important, delegate it. And if it's neither one, then delete it because it's unnecessary and just a distraction. But in the context of this video, we have this version of it, and this is from a cheat sheet that I saw posted on Twitter from Chris Donnelly at chris-donny.co.uk. So if it's urgent and important, it's probably wise to say yes. If it's not urgent but it is important, say no. That will have to be done later or added to the sprint or the backlog, and someone will get to it. If it's urgent but not important, try to delegate it, maybe to the junior devs. 

Maybe it's not technical and could be pushed to another department that has more free time. And by the way, that junior dev that keeps coming to you when they mess up to bail them out? It's important, but it's not urgent, and you have your own deadlines to meet. It never hurts just to ask them to create a ticket for someone else to get to the issue when they're freed up from what they are currently doing. And then finally, when it's not urgent and not important, it's a no. It's an easy no. Those are the tasks that stay in the backlog until someone sees them six months later, and they're like, "Can we just delete these?" So you have a quadrant to say yes, and you have a quadrant to say no, and then you should be cautious with the other two quadrants, not accepting yes blindly or too quickly. 

Remember, time is something that you can never control. You can never stop it; it just keeps ticking away. When you say yes to someone, you give them a chunk of your time, and that time you will never get back. So, starting today, be mindful about how you exchange your time. Be cautious of flipping out a quick yes. Give yourself time to think first. And regarding learning to say no, try practicing with small things first. When you know you can't make an event or finish a task, remember to say no. 

Give a reason if you want or not, but don't be like, "Yeah, I'll let you know," or "We'll see," or any other similar half answer. In doing so, people will trust you more. People will like you more because you're honest, and you'll actually see an improvement in your confidence overall. So, what do you think? Do you struggle with telling people no? Let's discuss down in the comments. If you found this video helpful, give it a thumbs up. If you haven't subscribed to the channel, consider doing so, and I'll see you in the next video.