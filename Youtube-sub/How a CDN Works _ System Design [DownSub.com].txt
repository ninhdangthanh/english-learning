
So, today we're going to be discussing content delivery networks. A content delivery network, or CDN, is a system we can use to optimize the downloading of static files across the globe. Essentially, a content delivery network is just a network of servers optimized for delivering content to users, hence the name.

In general, a content delivery network consists of an origin server that holds all the assets our users need access to, along with a number of edge servers distributed around the globe. These edge servers cache copies of the content from the origin server closer to the users. Now, instead of having to go all the way to the origin server, our users can access these edge servers. This means they can get their content faster because the edge servers are physically closer to them than the origin server.

Let's look at an example. A common use case for a CDN is when we have a web server, and we want our users to access the pages on that server quickly. Our web server might be on the east coast of the United States, while our client could be on the west coast or even in Australia, with an ocean separating the two. When data is transmitted across the globe, especially overseas, it involves fiber optic cables laid under the ocean. These cables have limited bandwidth, and there’s increased latency due to the time it takes the signal to travel through this medium. 

In short, users who are far away from our web server will experience significant delays in accessing their data. When a user accesses a website, they first make a request to the web server, which returns some HTML. But once the HTML is loaded, the website needs additional assets, such as CSS (to style the page), JavaScript (to make it interactive), and images or icons. This means the user has to make multiple requests, and the web server has to send back various types of data over the internet.

While the data on the page changes frequently, the HTML, CSS, JavaScript, icons, and photos usually don't change very often. These are what we consider static assets. CDNs excel at caching these static assets but are less effective at caching dynamic data because updating data via a content delivery network takes time.

Let’s look at how a CDN operates. In this example, we have an origin server (our web server) that holds the data users need to access. We also have users who are trying to access that data—likely through a web browser. Remember, the user and the origin server could be geographically far apart. To reduce latency, we introduce edge servers into our CDN.

Initially, these edge servers have no data. When a user makes a request, the edge server will recognize that it doesn’t have the requested data and will proxy the request to the origin server. For this first request, the CDN doesn’t offer much benefit, but after the edge server gets the data from the origin server, it caches it. Now, the next time the user makes a request, the edge server can quickly respond with the cached data because it’s closer.

As users continue to send requests, edge servers accumulate more data from origin servers. Eventually, edge servers may run out of storage space. At this point, they must decide which content to remove to make room for new data. Generally, systems like this either remove the least recently used or the least frequently used data. This ensures that the most important content remains cached in the CDN.

Another key factor to consider is that content on the origin server may change. Even though the data is static, we might sometimes want to update our web page, causing the origin server's data to change. When a user accesses the edge server, it may still have an outdated copy of the data, meaning the content is stale. There are many ways to resolve this issue, but we won’t dive into them now. If you're curious about how problems like this are solved, you should check out the full video on content delivery networks on interviewpen.com.

There are several existing solutions that have already built and deployed CDNs, handling issues like cache invalidation for you. Some examples include services like CloudFront (or equivalent services in Google Cloud and Azure) that integrate well with their respective cloud storage solutions and other services. If you're already working within these cloud ecosystems, this could be a solid choice. There are also services like Cloudflare and Fastly, which pride themselves on offering performant CDNs with advanced features like security and rapid cache purging.

Lastly, platforms like Vercel offer all-in-one solutions that make it easy to deploy web applications, caching data behind the scenes on a CDN. Of course, many other services exist, and I encourage you to explore them if you’re interested in learning more about CDNs.

If you enjoyed this video, you can find more content like this on interviewpen.com. We have tons of in-depth material on system design, data structures, and algorithms for all skill levels, along with a full coding environment and an AI teaching assistant. You can also join our Discord, where we’re always available to answer any questions. If you or a friend wants to master the fundamentals of software engineering, check us out at interviewpen.com. 
