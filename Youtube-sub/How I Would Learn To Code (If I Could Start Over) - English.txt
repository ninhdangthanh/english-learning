It may not look like it, but I've been coding for over 30 years. I've been paid to code for more than 20 years, and I've been at Amazon for more than 16 years, where I'm an L7 Principal Software Engineer.

In this video, I'll tell you exactly how I would learn to code if I were to start over today. If I could go back in time and tell my younger self this stuff, it would have saved me so much grief and effort.

I tried to put some form and structure into this video, but I couldn't quite make it work. So instead, my points will be in no particular order, with some inspirational music in the background.

No, maybe something a bit more... Yeah, that works. Yes, all right. You don't need a computer science degree. If you're college-bound or college-aged, getting a CS degree certainly won't hurt. Or, if you're someone who thrives in a structured environment, a boot camp might be a good option. But the amazing thing about software is that you can have a very successful career without a formal education. I don't have a computer science degree. If software is something you want to do, you can do it, and you won't be limited by not having a CS degree.

We're also in a golden age for learning. Most everything you need to know is online and free on the internet. You won the galactic lottery—what a time to be alive! Get familiar with the command line. The most efficient way to tell a computer to do something is with a keyboard, not a mouse. Learn one computer language really well. It doesn't matter which one, but also don't be afraid of learning new languages. If you've spent some time learning one and want to switch your primary language, do it.

There's no such thing as a sunk cost. Picking up the syntax of a language is much easier once you've got a conceptual understanding of what's going on. It doesn't matter why you want to learn to code, just that you want to do it. Wanting a high-paying, in-demand job is just as good a reason as any. A lot of people might hate on you because it seems like a trendy thing to do. Programmers aren't going anywhere. If coders could be replaced by code, then they would have done so by now. The world needs more programmers. Don't listen to the haters. Haters only show up when you're trying to do cool stuff. What are they doing with their lives? Nothing.

This is the biggest risk to learning to code. When you sit down to do your work, you need to have long, uninterrupted stretches of time dedicated to your new craft. Take your phone and move it to the other side of the room. Turn off notifications on your computer. The minimum time should be one hour of uninterrupted focus on what's in front of you, preferably two hours, and even four hours if you can swing it. A little every day of uninterrupted focus will get you so far. Every time you scroll on Instagram or check Reddit, it's stealing your most valuable resource: your undivided attention. Don't try to make up for it with all-nighters. It's not healthy. Your relationships will suffer, and you'll burn yourself out.

Learn Git. It saves and manages all of your code, so you never lose it. And when you become a pro, it's how you'll work with your team to check your code in. Never limit the amount of "how does this thing work" or "why is it done like this" questions. Let your curiosity take you places. Picking up any skill involves understanding concepts and gaining context. You might discover some things that you didn't even know existed before, and that may turn out to be the direction you want to take your career.

Learn how to write tests and make your code testable. It's going to be a lifesaver when you fix an issue in your code that breaks something else, but when you fix that thing, the first thing crops up again. Writing tests is also the mark of a good developer—unless you want to work in gaming, in which case don't worry about it.

Find someone in real life who can help you answer your questions. If you're in a position to help someone else with knowledge that you've gained, do it. You reinforce your own understanding by explaining things to others. Your aim should not simply be to learn how to code; your goal should be to become a professional, where people give you money, and you write code for them. Simply learning a programming language is not enough—it's a craft. Right now, you're an apprentice on your way to journeyman, and then eventually to master.

When you first start, you can't tell good from bad, janky from rock solid. As you go on this journey, in the back of your mind, ask yourself, "How would a pro do this?" Beginners over-index on getting things working, which makes sense—it's hard enough. But to transition to getting paid for your work, you need to know what "good" looks like. Studies have shown that project-based learning is the most effective. Creating something rather than passive learning, like simply reading about a topic, is proven to speed up acquiring new skills. So don't say, "I want to learn Rust; I'm going to watch YouTube videos on Rust." Rather, you should say, "I want to build a Hello World Rust program" and go from there.

You want to pick a project that's barely outside your skill level, but since you're new, you can't possibly know when you've bitten off more than you can chew. You'll know you're in over your head when you can't even formulate a question for why you're stuck. This is super normal. When you think you've tried everything, don't be afraid to abandon the project—just make sure to create a project graveyard where you document how far you got. As you progress on your journey, you'll learn the critical concepts that unblock you later; you just don't know when that will happen.

Also, tutorials for programming are sometimes terrible, but again, there's no way to know that before you start. Step one: draw two circles. Step two: complete the owl. Another benefit of project-based learning is that you can reference completed projects on your resume when you lack industry experience. Wear sunscreen. If I could give you just one tip for the future, sunscreen would be it.

Programming is a team sport. In basketball, there are superstars that the team is built around, but every team needs role players. Once you've learned some basics, you should participate in hackathons, which are sort of like pickup games. It will give you exposure to working together. You get to witness how people with more experience operate, and you get a feel for what it's like to deliver something under pressure.

You need to start using precise language. Programming is all about taking a problem in the domain of human language, which is imprecise, and transforming it into code that cannot be imprecise. The computer does exactly what you tell it to do, sometimes with hilarious consequences. But don't let this bleed too much into your personal life—you don't want to be that guy at the party, you know, "Technically speaking, a tomato is a fruit."

Related to this, you want to cultivate your attention to detail. The details are really important. Let's talk about data structures and algorithms. Programming or software engineering is about getting computers to do things. Computer science is exploring what computers can and cannot do. Both topics are amazingly deep, but you don't have to have a computer science degree to be a programmer, and a lot of programmers don't have much computer science depth.

Many companies use data structures and algorithms to filter out candidates for the most lucrative jobs, where they expect you to code in front of their judging eyes in real-time. It's pretty intimidating, but this is largely book knowledge, and there are a ton of incredible videos on YouTube on techniques to learn how to solve these problems quickly. So don't over-index on this stuff just because it's required to get a job. Data structures—or how computers represent things—and algorithms, or how computers do things, are super useful and interesting, but it's simply an aspect of programming, not the totality of programming.

You will get stuck. You will feel like an imposter. You will want to quit. Don't get good at googling. Go to Stack Overflow, or rubber duck it—where you try to explain the problem to an inanimate object to get you unstuck. Did you know last year I didn't know how to make YouTube videos? I still don't know how to, but I didn't last year either. Everything can be figured out. You are smart enough—it's just a matter of time. Getting stuck is part of the job. It never ends. Have fun and don't take yourself too seriously.

Don't conflate having an in-demand skill with being a superior person. I'm not merely a coder; I'm a software engineer. Also, I don't just watch movies—I'm a connoisseur of film. Programming is just a skill, not your personality. Join the Programmer Humor subreddit and read XKCD. If you get all the jokes there, you're in the in-group, and I will officially certify that you are a coder.

Everybody needs to go on their own journey, and mine has been a long and strange one. And depending on how this YouTube thing pans out, hopefully, I'm near the end of it. Looking back on it, though, there are certainly some portions where I spent too long before going on to the next level or milestone, where the extra time didn't help. That's why I created this channel—to give you all of the lessons I've learned throughout my career and give them all to you for free, so hopefully, you can fast-forward through all of the uninteresting bits.

You can find my latest video here, and one day, when you're the boss making millions of dollars in tech, I hope
