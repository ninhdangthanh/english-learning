The four most commonly used types of indexing in databases are:
B-tree Indexing:
The most widely used type of indexing in relational databases.
B-tree (Balanced Tree) is a self-balancing tree structure that maintains sorted data and allows for efficient searching, insertion, and deletion operations.
It is particularly effective for range queries and equality searches
Hash Indexing:
Hash indexes are based on hash functions, where the key is hashed to produce a fixed-size value, which points to the data in the table.
It is extremely fast for exact match queries but not suitable for range queries.
Hash indexes are most effective when you need fast lookup for equality comparisons.
Bitmap Indexing:
Bitmap indexing uses bitmaps (bit arrays) for each distinct value of a column, where each bit represents a row.
It is very efficient for columns with a limited number of distinct values, like boolean flags or categorical data.
It can also be used for complex queries involving AND, OR, and NOT operations.
Full-Text Indexing:
Full-text indexing is used for indexing text-heavy columns to allow for fast full-text search operations.
It stores information about words or terms in a text and provides efficient searching for patterns, phrases, or individual words.
This type of indexing is typically used for search engines or content management systems where textual content is queried frequently.
Each type of indexing has its advantages depending on the use case, query patterns, and data structure.
B-tree Indexing:
Best for: Numeric types, DATE, DATETIME, FLOAT, and other ordered data.
Use case: As B-tree indexes maintain sorted data, they are particularly efficient for range queries (e.g., BETWEEN, >, <) and equality searches on numeric fields. Since the values are stored in a balanced tree structure, it's optimal for most queries involving comparisons.
Hash Indexing:
Best for: Short text, such as addresses, IDs, or names.
Use case: Hash indexes work great for equality lookups, where you're searching for an exact match, such as looking up a specific blockchain address or a username. However, they are not suitable for range queries (e.g., BETWEEN, >, <), so they're mainly used in applications requiring fast retrieval of unique values.
Full-Text Indexing:
Best for: Large text, such as descriptions, articles, or documents.
Use case: Full-text indexing is designed for searching text content quickly, especially when dealing with large volumes of text. It allows you to search for specific words, phrases, or even patterns (using techniques like stemming, tokenization, etc.). This is common in search engines, content management systems, and applications like product search in e-commerce platforms.
Bitmap Indexing:
Best for: Columns with low cardinality (few distinct values), such as categorical fields (e.g., types of vehicles like car, bike, etc.), gender, or status flags.
Use case: Bitmap indexes are highly efficient for columns with a small set of possible values. They work well when you frequently perform complex queries that involve multiple AND/OR conditions. For example, if you want to filter vehicles by type (car, bike), bitmap indexing can speed up the query significantly.
So, in summary:
B-tree for numeric and range-based queries.
Hash for fast exact-match lookups on short values.
Full-text for searching within large bodies of text.
Bitmap for categorical data with low cardinality, where fast, complex filtering is required.




