Welcome to the Jelix channel! Could you imagine if the battles between frameworks were resolved in court? Well, today we’ll be doing exactly that. Let’s imagine ourselves in a court hearing, discussing the case of two frameworks: **Svelte** versus **Vue**. It might not have the grand publicity scale of the **Johnny Depp versus Amber Heard** case, but for the Jelix team, it has been far more controversial.

So, let’s get it going! We are Jelix, a software development partner for industry leaders. We post weekly videos on tech in just 5 minutes. Don't forget to subscribe to our channel and use the "Super Thanks" feature to support us, so we can keep delivering more great content!

First, it's important to point out that both Vue and Svelte are **JavaScript frameworks** used for building user interfaces. However, they have distinct differences in their **design philosophy**, **approach to development**, and **learning curve**. Let’s explore some of their core differences in framework design. 

This is where the core trial begins.

First of all, **Vue.js** is a **progressive framework**, meaning you can gradually adopt its features into an existing project. It uses a **virtual DOM** for efficient rendering, helping to build interactive applications with ease. Vue also utilizes **templates** and offers a clear **separation of concerns** between HTML, JavaScript, and CSS. **Server-side rendering** is widely supported—unlike Svelte.

Svelte, on the other hand, is a **compiler-based framework**. Unlike Vue, it focuses on writing components as close to **HTML and CSS** as possible. Furthermore, Svelte doesn’t rely on a virtual DOM but instead compiles components directly into **DOM manipulation**.

So, what accusations did Jelix developers bring to the court against these frameworks?

The claims include framework-specific syntax, scoped CSS complexity, Vue's reactivity system, managing global CSS variables, and state management. All these processes are argued to be more challenging to handle in Vue, especially for new developers, compared to Svelte. Additionally, a range of factors affecting **Vue app performance**—like runtime overhead, bundle size, initial load performance, and building the runtime—have left Jelix developers dissatisfied.

Svelte, in contrast, offers an **innovative compiler-based approach**, with unique advantages in **optimizing code** and reducing runtime overhead. It’s called the framework for writing faster JavaScript for a reason. The high performance of Svelte is attributed to its **compilation process**, where components are compiled into highly optimized JavaScript at **build time**. This results in **smaller bundle sizes**, reduced runtime overhead, and faster load times.

However, the opponents of Svelte claim that the framework is not as great as it seems. The so-called "haters" of Svelte point out potential risks of its **novel approach** and the relatively fewer **community resources**. Moreover, Svelte is criticized for being less mature in terms of **tooling** and **mobile development**, which they claim could lead to complications in projects.

But hold on! This is where the Jelix fans of Svelte take the defense. According to them, the benefits of Svelte outweigh the risks, especially for smaller projects or those prioritizing performance and simplicity.

So, who’s right?

To impose a fair judgment, the Jelix team decided to refer to the most objective judge—**statistics**. Jelix teammates checked the **State of JS** page and discovered that Vue is undeniably the more well-known and used framework. By 2021, only **0.4%** of respondents had never heard of it, compared to **6.5%** who didn’t know about Svelte. Moreover, **41%** of respondents mentioned they would use Vue.js again, while only **17.8%** said the same for Svelte.

However, statistics also reveal more than twice the interest in Svelte. While the growth dynamics of Vue are greater, Svelte shows a **significantly lower percentage** of dissatisfied users, suggesting it might continue to strengthen its position in the market in the future.

The data provided great insights for the Jelix team, but it wasn’t enough to satisfy their curiosity. The next question that arose was: how can developers identify which framework is better for their specific use case?

Well, we’ve got you covered! Check out this **brief checklist** to help you make the right choice between Vue and Svelte for your next project.

And finally, if you’re interested in more comparisons, we recommend watching our next video, comparing **Vue** and **React**. Don’t forget to support us by **liking** this video, leaving a comment, and **subscribing** to our channel. Make sure to press the **bell button** so you never miss out!

Bye for now!