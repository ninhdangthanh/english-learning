So, I have some unfortunate news for everyone. The days of learning HTML, CSS, JavaScript, and landing a $100K a year job within 6 months are sadly over. To be honest, I'm not sure they ever existed in the first place. However, the point is that landing a job as a self-taught programmer is becoming exceedingly more difficult than it has ever been in the past. The landscape of the tech industry has significantly changed ever since I got my first job back in 2016.

Matter of fact, when I got my first programming job in 2016, I didn't have much experience, and I certainly didn't have a killer portfolio to show anybody. The extent of my experience included some classes I had taken in high school and some really crappy Java applications I had written. But somehow, someway, I still managed to land a part-time coding job with relatively no effort. Now granted, I did land this job through a string of connections I made, which kind of just goes to show how powerful networking can be. But still, if I were trying to get a job in this market with the amount of experience I had back in 2016, I would probably have a better chance at winning the lottery.

The reality is the market is just terrible right now. I had someone recently reach out to me who had just finished their computer science degree. They had done an internship at Meta but were significantly struggling to get callbacks from recruiters. So, if people with degrees and experience working at big tech companies are struggling, you can only imagine how hard it is for those who were told by influencers like me that it's possible to get a job in programming without a college degree.

To be clear, I'm not trying to scare you. If you are self-taught, you can still break into the industry. But it's important that we acknowledge that the industry is in a pretty rough spot right now. Layoffs are happening left and right, and a lot of developers are struggling to find jobs. While I do believe that the market will get better, I'm not entirely convinced it will ever return to its previous levels. This is why I say you will have to work significantly harder than you would have in the past to compete with all the other competition out there.

When I say "all the other competition," I don't have any statistics to back the idea that the market is oversaturated, but it does feel a bit oversaturated. With all the coding boot camps turning out grads every 10 months and all the influencers promoting learning how to code, the supply of developers has gone way up. Meaning that if you want to break into the industry, you will have to do things to really stand out from everyone else.

What do I mean by this? Well, simply put, you're going to have to have the type of experience that employers are looking for from the get-go. I want to walk through an example with you. Let's take a look at the average entry-level developer job posting. This is for a full stack entry-level React developer position, and these qualifications are generated from Google because they're stripped directly from the original job posting.

Right off the bat, you may notice that this entry-level posting wants two years of experience, which is not an atypical ask for entry-level positions nowadays. With proper laying out of your resume, you can look like you have two years of experience even if you spent those two years learning. This is something that we'll go over in a minute. Other than that, you will see that you need experience with JavaScript, React, Redux, HTML, CSS, REST APIs, authentication mechanisms, knowing how to optimize React projects, continuous integration technologies, and Agile and Scrum knowledge. The very last point here is a computer science degree.

Now, I don't want this to scare you too much because if you display a high level of competency in the above points, this can be overlooked in some instances. But the reality is that if you're competing with somebody who is equally as good as you and they have a computer science degree, they're going to get the job. This is why I said in the beginning of this video that you're going to have to do things that really stand out from all the other competition. If you really want to stand out, you can look at this job posting or other job postings like it as a sort of recipe for getting into the industry.

You will likely never work for this company, but the idea is that we can find job postings for jobs we're interested in and use them as a template for the type of project we can build that will help us get another job later down the road. You can take this tech stack and the processes laid out in this posting and use them to create full stack real-world use case applications. To really stand out as a self-taught developer today, it is pivotal that you display a high level of competency in the way that real companies develop real software. So that when you start interviewing for a company, you will look like the type of candidate that will hit the ground running.

How do you gain experience in building real-world software as a self-taught developer with no job experience? You do that by building real-world full stack applications. Most product or service-driven companies prioritize the development and maintenance of full stack CRUD applications, which is why it is an extremely safe bet to build these types of projects. By building these types of projects from the ground up, you will gain a large depth of programming experience which you can use to create a beefed-up resume.

Let's run through an example. Let's say this is the type of job I'm going for, the one that lists out all these qualifications. The very first step is to come up with a project idea. Because this is for the sake of learning, this project idea absolutely does not have to be unique. Pick a hobby, like reading. You can build a very robust CRUD app around the idea of book reviewing, book rating, and sharing books with friends. Matter of fact, this idea already exists; it's a platform known as Goodreads. You can take Goodreads, build it from the ground up with a slightly tweaked feature set, and then rebrand it as your own.

For this example, let's say we have our project ideaâ€”building a Goodreads-type application. Let's go through how we can gain experience in the other qualifications listed out in this posting. First off, we'll build our front end using React, TypeScript, and the Redux library, so we can check off these bullet points here. By using React, we'll naturally gain experience in HTML with JSX, which is similar enough, and we'll also gain experience in CSS. We can gain JavaScript experience by deploying an API of some sort using an AWS service, such as AWS Lambda. We'll need a database for our API to fetch and save data records, so we'll create a database, maybe something like MongoDB, and host it with Amazon. We can implement a login page in the app that uses the type of JSON authentication mentioned in the job posting.

As for Agile and Scrum, we can spend a few hours doing some research into how companies follow Scrum practices and then follow those practices while creating our portfolio project. Learning these Agile and Scrum practices should be done before you dive into the creation of your portfolio project, as they are essentially project management techniques that can significantly help you with the overall development of your project, while at the same time giving you real-world experience in how companies use Agile to develop their software. Finally, we can use something like GitHub Actions to automatically deploy our release builds, giving us some high-level exposure to how CI/CD works.

In theory, we could build and deploy this application using the practices I've just mentioned, extending that over a 6 to 12-month timeframe of coding, deploying, and refining. If you worked on a full stack application of this sort following this plan for 6 to 12 months, by adding new features, refining existing features, fixing bugs, and actually deploying it to the public, you would gain the type of experience that real companies value. You would have killer points to mention on your resume and projects that not even the average computer science student has on their resume. Most people list very basic projects on their resume that they developed within one to two weeks.

As for the resume, here is how you could create an entry-level developer resume with the project idea I've just gone over. This is a fake resume, not real, and it should just serve as an example or model for the type of resume you could create. If you're interested in downloading this resume, head to the link in the description to sign up for my newsletter. Upon signing up for my newsletter, you'll gain access to download this resume for free and also gain access to my free ebook, "From Zero to Full-Time Programmer in Five Steps."

That is the high-level overview of the type of work you will need to do to land a job in this market as a self-taught programmer. Even if you're not self-taught, you could greatly benefit from building these types of projects. Thank you for making it this far in the video, and I will catch you in the next one.
