
As a software engineer, it's hard to measure productivity, let alone be productive in the first place. In this video, I'm going to talk a little bit more about the difficulty of measuring productivity, then share some of the things that I did to improve my productivity and appearance of productivity over the years.

Hi, I'm John Mueller, the deliberate engineer. I was a software engineer and engineering manager for 30 years. I worked at Microsoft, Amazon, Google, and Oracle. In addition to keeping my head above water at my job, I also finished a master's and a PhD while working full-time. So, I know a little bit about productivity and distraction.

As a software engineer, you can make yourself feel good by looking at how much coding, designing, or writing you've done, or you can wind up making yourself feel lousy. Whatever the case, it won't necessarily impress your boss or co-workers because they'll have their own idea about how hard or how useful what you've done is. Lots of younger managers rely on quantitative measures for output, but this is incredibly misleading when measuring productivity, like lines of code, bugs filed and closed, number of check-ins, and number of files changed. These are all common metrics—I've used them myself.

I worked with software engineers who only produced tens of lines of code a day and others who produced literally thousands. I've seen bugs that take a few minutes to fix and bugs that take person-months to pinpoint before a single line fix. It's difficult to measure the correctness, quality, and value of artifacts like code, bugs, and designs. Take design: with one problem, you can write a 10-page design that solves it off the top of your head and be done in a day. With another, that same 10-page design can require literally months of thinking, reading, and investigation to be able to put it together.

Put those two designs in front of a skilled manager or peer, and many of them won't be able to tell you which one was hard. This is especially true if they haven't done a deep dive into the problem space, which most of them won't have. As software engineers, we're notorious for thinking that things are easy based on a quick glance at the surface of the problem. We're all guilty—so how often have you had something that you thought was going to be a one-hour job turn into two weeks of effort?

What can you do to show your productivity and become more productive? Here's five pieces of advice based on my own experiences—in short, what worked for me.

First, make notes as you go. Track any investigations you do, as well as your output. When you're working on a hard problem, keep track of the insights you have, the things you discover, or the paths you discard as you go. Make sure that you can talk intelligently about both what you discarded and what you found, and what makes your solution good or bad. This isn't just about showing where you spent your time and proving that you actually investigated things; it's also about documenting the paths that seemed like a good idea but ended up being lousy so that other people won't follow in your footsteps when they have to come along and fix a bug or refactor the code.

Whatever I mentioned—my good and bad findings—in design documents, usually, they go into a discarded options or a non-goal section that describes why we're not doing something. Why are we not following a particularly obvious and good-looking path? To keep other people from making exactly the same mistakes. Sometimes the discoveries you make have more to do with algorithms or the actual implementation than the design. For these, rather than putting them in the design document, I tend to put notes at the top of the source code file. That way, when somebody's looking at the modules and trying to get familiar with them, they'll see what I bumped into, why I made the decisions I did, and they'll be less likely to just throw away the code that I wrote and rewrite it—or worse, change it in a way that doesn't work.

Another thing that you want to consider doing to help be more productive and to understand where your time is going is actually to track the time you spend doing different things. Although it's anathema to most of us, tracking your time can be reassuring and useful, especially if you're only going to make it available for your own consumption. A lot of times, I felt I wasn't working hard enough, that I was goofing off too much, that I wasn't showing up to the office enough. I'd get to the end of a 12-hour day with no real results to show for it and no idea where the time went. This was much more common for me as a manager than as a programmer, by the way, even though I was working harder and doing more when I was managing.

Real data is a great way to reassure yourself that, no, you really are working and doing useful things—just not what you thought your priority was. Whenever I felt unproductive, I tracked my time down to the minute. To do this, I wrote a small script that would append a single line into a log file each time I entered a note, which would include the timestamp, a category of what I was doing, and a small note to myself explaining what I'd been up to. Sometime later, I could take a look through the data that I logged and see what I did in a given day, or even over a whole week. Or, if I wanted to analyze it more deeply, I could import this data into a spreadsheet and then do summary calculations to take a look at how much time I spent and what categories, and the major things that I accomplished.

For example, when I did this in the past, I'd find things like I didn't goof off nearly as much as I thought I did, or that I spent an average of 30 or 35 minutes at lunch, or that I went to the kitchen for 45 minutes a day. Insights like these—more importantly, I also got insights like too many people are visiting and taking time that I need to do other things. Then, I got the idea that rather than always accepting every visitor, I could ask the people who showed up frequently to instead save up some of their questions and schedule time with me. This led to fewer interruptions and helped me reclaim more of my time.

Thanks to the little note that I often added to these entries, I was also able to see just how much time I was spending investigating, reading up, or doing whatever to find a particular problem or to come up with a particular design. Now, this is something that I could then say, "Well, I spent a lot of time learning this or doing that," and I could make sure that I added notes about that into the design doc or into the source code. Tracking your time like this can't account for everything. If you're walking around thinking about a problem, there's no good way to log that. Nevertheless, I found it a useful tool for both improving my perceptions of how productive I was, redirecting what I was working on, and being able to describe it later to somebody else if I needed to.

Another insight I got out of this logging was when I worked weekends. I used to work weekends quite a bit. I would work, I thought, eight or nine hours across both days of the weekend. When I took a look at the logs, what I found was I was only getting two or three hours of time logged, and what I was doing was doing it in tiny little micro chunks here and there that wound up wasting the whole weekend without anything good to show for it. That led me to decide that I wouldn't work on a weekend unless I was going to do something significant. And when I did, I would concentrate the effort that I had into a particular part of the weekend—for example, Saturday morning, first thing, for four hours.

I wrote a script because it was the old days, but that's not what you have to do. If you want to be able to track your time today, there's a lot of cloud applications and phone apps that do the same thing I was doing. I used one called RescueTime for a while, and I thought that was a pretty good way to log your time and even to be able to write billable hours if that's something that was appealing to you. There's also different types of apps that, rather than relying on you to enter some sort of a manual value, will keep track of what windows you have open and how much time you spend typing in each of them. That can give you a summary at the end of the day that, again, can be quite useful for understanding where your time went.

My third way to be more productive is to try and switch tasks less often. Research and experience both say that context switches are the devil. Every time you switch from one task to another, you reduce your productivity and lose context. According to the 2021 Catalog Worst Geist report, it can take almost 10 minutes to get back into a workflow when you switch apps, and the average worker spends 36 minutes a day just switching between apps.

Now, this isn't a new problem—it's been around for a while. If you take a look at a summary of the relevant research by the American Psychological Association, which I've linked down below, it talks about findings by Meyer, Evans, and Rubenstein that even brief mental blocks created by shifting between tasks can cost as much as 40 percent of someone's productive time. You're cutting your productive time in half by switching context too often.

The guidance you should take away from this is simple and borne out by my own experience in research: spend longer at each task and reduce interruptions. If your time log has a bunch of five-minute entries instead of a couple of 30- and 60-minute entries, actively work to reduce the context switching that you're doing. If you find yourself juggling a bunch of different apps the entire day long, try

to work on tasks in blocks instead of being a hunter-gatherer of 5-minute victories. Try to consolidate the effort that you're making in each app, in each space, so that you're only doing one type of thing and switching less often.

A fourth way to be more productive is to make sure that your goals match those of your employer or project. This is more important than you think, and it's a bit controversial, as we'll see in a moment. You have to focus on what's valued, what your boss thinks is valuable, what you're going to be measured on, and what you're paid to deliver, not what you think is valuable. If you work for yourself or on a hobby project, then what you value is great—but when you're doing something that's commercial, the more important things to focus on are those that the project or your boss needs done. This is simple pragmatism.

I've worked on projects where the most highly praised people on the team didn't contribute a whole lot, but what they contributed, they made sure that it was highly visible and that it matched what the boss wanted to see. They got promotions. I've also worked on projects where people who delivered what was needed, quietly and invisibly, just got more invisible as time went on. Your measure of success is going to be what you get evaluated against and rewarded on, not what you think is important, or even what your peers think is important. It's great to deliver amazing work that people don't ask for, but it's also important to make sure that you're getting credit for it and that your boss knows that you've done it.

My fifth and final suggestion is to fixate on the things that matter. Now, I don't know what these things are for you, but for me, I always made sure that I had a very small list of very important things, a slightly larger list of important things, and then a large list of unimportant things that were all related to my job. I made sure that I stayed focused on those important things that I could tell, and my boss agreed, that I needed to get done.

One technique I used was to make a table of the work I had. I made a table of everything that I had in the works—problems, bugs, assignments, whatever. I then ranked these, top to bottom, based on the impact that they had on what the team was trying to accomplish. This wasn't a difficult thing to do. I would just take a look at the things that would either have the most impact on customers or on other members of the team, or would enable my boss to do something that he wanted to do.

The important things, I would concentrate a lot of time on; the unimportant ones, I would either not do at all or just squeeze in between more significant tasks. The key here is prioritization—making sure that the bulk of your effort goes into things that really matter, rather than getting bogged down by things that don’t contribute much to your overall goals.

One thing I noticed over time is that it's easy to get caught up in busy work—tasks that feel productive but don’t really move the needle. These might include replying to low-priority emails, attending non-essential meetings, or tweaking things that don’t need tweaking. To avoid this trap, I found it useful to regularly review my task list and ask myself: “Is this really the best use of my time right now?” If the answer is no, I’d either delegate it, delay it, or drop it entirely.

Another aspect of this is learning to say no. It’s tempting to agree to every request, especially if you’re someone who likes to be helpful. But overcommitting can lead to burnout and dilute the quality of your work. It’s better to deliver a few things exceptionally well than to do a mediocre job on many tasks. This doesn’t mean you should be uncooperative, but rather that you should carefully evaluate each request and consider whether it aligns with your primary objectives.

Lastly, I found it beneficial to periodically take a step back and reassess my priorities. Sometimes, what seemed important a month ago may no longer be relevant due to changes in the project or organization. By regularly reviewing and adjusting your priorities, you can ensure that your efforts remain aligned with what’s most important.

To summarize, improving productivity as a software engineer involves more than just working harder or longer. It requires strategic thinking, careful tracking of your time and efforts, and a clear understanding of what truly matters in your role. By making notes, tracking your time, reducing task switching, aligning your goals with those of your organization, and focusing on what really matters, you can significantly boost both your productivity and your perceived value within your team.

Remember, productivity isn’t just about output—it’s about delivering the right outcomes in the most efficient way possible. By applying these principles, you’ll not only get more done but also ensure that your work has the greatest possible impact.