help me rewwrite sentences, add punctuation, line breaks, and without remove any word, dont remove word, and give me almost equivalent word with origin paragraph:
---

So, on this channel, I've talked a lot about interviews, specifically LeetCode and system design, but there's an entirely different class of software interviews, which is the web development front-end interview. All of my six-year career in software engineering was working in full-stack web applications. I've probably been interviewed between 50 and 100 times in my life, and I've also conducted about 50 to 100 interviews in my life as well.

So today, I wanted to share what goes into a web development software interview. To start, what is a front-end software interview? There generally are three types of interviews. There is the full-stack web application interview, which is basically where you'll be working on not only stuff that you see on a web application but also stuff that you don't see, like server-side components. This will usually be for startups and stuff like that.

The next is a position that's mostly going to be React-based. These are getting into the more true front-end positions where you're working specifically on JavaScript and React. The last is the positions that are HTML, CSS, and JavaScript-based. Maybe they use jQuery and stuff like that. These are some of the older front-end positions that existed in the past before React and all these other JavaScript frameworks became a thing. These probably will be in some sort of big company maintaining legacy software or stuff like that.

So, let's start with what and how to prepare for these interviews. I'm going into this with the assumption that you already know JavaScript, HTML, CSS, React to some extent, and are just looking for resources on how to prepare for these more difficult interviews. There are three main things to prepare and to expect in front-end interviews.

The first is the JavaScript fundamental stuff. If you haven't worked in JavaScript a lot or if you don't know the deeper parts of JavaScript, it is a very weird language. There are all kinds of people online that really talk about how much they hate the language. Funny enough, there's actually a whole subculture online of people who just hate JavaScript and how it works, with all its little nuances. The first thing that's important to do is to do an advanced deep dive into how all these small nuances of the language work. There's all kinds of weird stuff like closures, variable hoisting, truthy/falsy values, callbacks, promises, async/await, block scoping, the 'this' keyword, and how the JavaScript event loop works compared to other languages. A lot of interviewers really like to test the niche-specific weird use cases of JavaScript and their weird parts of the language to see if you actually know what you're talking about. Understanding this basically takes going through some sort of course or reading through some sort of resource to understand all these little idiosyncrasies. I have posted here a list of 1,000 JavaScript questions that might be helpful if you want to go through it. For me personally, when I was doing a lot of JavaScript interviews back in 2018 and 2020, I went through this Udemy course, "Advanced JavaScript." It is paid, but I found it to be very helpful for me to understand all these crazy things about the language.

The second thing you need to prepare for front-end interviews is React basics. This is assuming you're going for a position that uses React, which most of them out there are. What you really want to do is read through a lot of the React documentation and really figure out how these things work behind the scenes. We might use a lot of the React API on a day-to-day basis, but it can be easy for us to not really know how things work down below. It's important to really understand those parts so that when an interviewer asks, you don't have to make things up; you already know. I really recommend going through the React documentation, at least reading through useEffect, useState, useMemo, useDeferredValue, useCallback, and just most of these different API calls, and you'll be in good shape for interviews.

The last thing you need to prepare for front-end interviews is to do these React puzzle-building type questions. These aren't exactly like LeetCode style questions because they're a little more applicable to the actual job than LeetCode, but some of these questions can be a little difficult to understand and build intuition for if you don't practice them. I have this site over here called "Great Frontend" that I've been using a lot for front-end interview prep, and basically, it has a whole bunch of different interview questions for front end. This one says, "Build a clock." This question over here is about building a stopwatch. Try to go through and spend at least a little bit of time going through these questions to build intuition for them and understand how basic React components are structured and how to make API calls and stuff like that.

Now, let's talk about the formats of the front-end interview. The first type is based on the JavaScript fundamentals that I mentioned earlier. Interviewers who test front-end really love to ask all those little JavaScript nuances, and they can ask a whole bunch of them in the course of a 30-minute or a 60-minute interview. This is where it's really hard to BS knowledge unless you've just already been there, or you've already worked in the language, or you've already taken a course about it. This is a part that I cannot stress enough how important it is to learn these small nuances of JavaScript.

The second part of these front-end interviews is coding live. Remember all these different React problems I brought up earlier? Well, these are all basically different types of questions that will be asked during an interview. During an interview, you're only going to have maybe 45 minutes max to build out an entire React component. The idea here is that the interviewer is going to give you a set of functional requirements. It's probably going to be something like going to an API, pulling it, and displaying it in a list, and being able to delete values and stuff like that. It's not going to be a large project, but interviewers can tell just by how you code, how you Google things, how you search things, and how you problem solve if you're going to be competent at your job or not.

The last part of these front-end interviews is really talking about yourself. One of the biggest parts about interviews is that they want to hear about what you worked on and how you made an impact on the projects you did work on. I've definitely had interviews in the past where the interviewers really drilled deeper and deeper into what I actually did on certain projects at my job to see if I was bullshitting them or not. Make sure if you've worked on projects in the past or contributed heavily to a React application or other web application in your previous jobs to write down and describe what you did so you won't get nervous and confused when it's time to describe your work.

Now, I want to talk about a few mistakes that I've seen and done myself while conducting and being interviewed for front-end interviews. The first and probably the most important thing is something that I did all the time when I was first looking for a job and didn't know what I was doing. I would make up a lot when I didn't know the answer to a question. I would try to pretend like I knew the answer to a question. I did this so much. The thing about it is, if you're talking to someone who's a seasoned web developer, they can instantly tell when you're bullshitting them. The point of this is that if you don't know a topic, if someone asks you something and you haven't worked in it or have no idea what it is, just admit it. It shows something about your personality when you're able to say, "I actually don't know anything about that, but I'm happy and willing to learn."

The second thing is to make sure you really know how to code in React. I've conducted a lot of React interviews where sometimes it can be painfully obvious that someone really just hasn't coded in a long time, and you can really tell easily. The third thing is that if the companies give you study guides or study material, make sure you review every single bit of it. This might seem like obvious advice, but actually, for the first time I interviewed at Intuit, they gave me a study guide of advanced JavaScript, which is what I described earlier. It had maybe about 20 or so topics, and I tried to review that list maybe about 20 minutes before the interview, just hoping that some of it would stick. When it came time for the interview and they grilled me on the exact same questions from the study guide, I blanked out and made up answers, and I sounded like I had no idea what I was talking about.

As a final reminder, the world of web development can be absolutely overwhelming. If you look at the roadmap to becoming a front-end web developer, you see that there's a ton of information you need to learn before you become competent. There was a time back in 2017 when I was first starting my journey where I looked at all this and freaked out daily. It's important to remember that it's not about looking at all the things you need to learn but rather figuring out what you need to learn today and tomorrow, taking it one step at a time. Don't overwhelm yourself, or this whole process will be much more painful.

Anyways, that's it for today. If you want to check out some of the other videos I've made about interviewing, click here to check out the one I made about system design. As always, thanks for watching.